[

  {
    q: '什么闭包, 闭包有什么用?'
    a:   '''
        闭包是在某个作用域内定义的函数，它可以访问这个作用域内的所有变量。

        闭包作用域链通常包括三个部分：

        1. 函数本身作用域。
        2. 闭包定义时的作用域。
        3. 全局作用域。
        
        闭包常见用途：

        1. 创建特权方法用于访问控制
        2. 事件处理程序及回调
        '''
    cost: 1
    scores: 10
  }

  {
    q: '''
      评价一下三种方法实现继承的优缺点, 并改进?
      ```
      function Shape() {}

      function Rect() {}

      // 方法1
      Rect.prototype = new Shape();

      // 方法2
      Rect.prototype = Shape.prototype;

      // 方法3
      Rect.prototype = Object.create(Shape.prototype);

      Rect.prototype.area = function () {
        // do something
      };
      ```
      '''
    a: '''
      方法1：

      1. 优点：正确设置原型链实现继承
      2. 优点：父类实例属性得到继承，原型链查找效率提高，也能为一些属性提供合理的默认值
      3. 缺点：父类实例属性为引用类型时，不恰当地修改会导致所有子类被修改
      4. 缺点：创建父类实例作为子类原型时，可能无法确定构造函数需要的合理参数，这样提供的参数继承给子类没有实际意义，当子类需要这些参数时应该在构造函数中进行初始化和设置
      5. 总结：继承应该是继承方法而不是属性，为子类设置父类实例属性应该是通过在子类构造函数中调用父类构造函数进行初始化

      方法2：

      1. 优点：正确设置原型链实现继承
      2. 缺点：父类构造函数原型与子类相同。修改子类原型添加方法会修改父类

      方法3：

      1. 优点：正确设置原型链且避免方法1.2中的缺点
      2. 缺点：ES5方法需要注意兼容性

      改进：

      1.所有三种方法应该在子类构造函数中调用父类构造函数实现实例属性初始化

      ```
      function Rect() {
          Shape.call(this);
      }
      ```


      2.用新创建的对象替代子类默认原型，设置``Rect.prototype.constructor = Rect;``保证一致性
      
      3.第三种方法的polyfill：

      ```
      function create(obj) {
          if (Object.create) {
              return Object.create(obj);
          }

          function f() {};
          f.prototype = obj;
          return new f();
      }
      ```
      '''
    cost: 10
    scores: 20
  }

]