[{"q":"doctype 是什么,举例常见 doctype 及特点?","a":"1. <!doctype>声明必须处于HTML文档的头部，在<html>标签之前，HTML5中不区分大小写\n2. <!doctype>声明不是一个HTML标签，是一个用于告诉浏览器当前HTMl版本的指令\n3. 现代浏览器的html布局引擎通过检查doctype决定使用兼容模式还是标准模式对文档进行渲染，一些浏览器有一个接近标准模型。\n4. 在HTML4.01中<!doctype>声明指向一个DTD，由于HTML4.01基于SGML，所以DTD指定了标记规则以保证浏览器正确渲染内容\n5. HTML5不基于SGML，所以不用指定DTD","cost":1,"scores":5},{"q":"什么是web语义化,有什么好处?","a":"web语义化是指通过HTML标记表示页面包含的信息，包含了HTML标签的语义化和css命名的语义化。 HTML标签的语义化是指：通过使用包含语义的标签（如h1-h6）恰当地表示文档结构 css命名的语义化是指：为html标签添加有意义的class，id补充未表达的语义，如Microformat通过添加符合规则的class描述信息 为什么需要语义化：\n\n- 去掉样式后页面呈现清晰的结构\n- 盲人使用读屏器更好地阅读\n- 搜索引擎更好地理解页面，有利于收录\n- 便团队项目的可持续运作及维护","cost":2,"scores":5},{"q":"HTTP method 有哪些，简述特点及不同之处?","a":"1. 一台服务器要与HTTP1.1兼容，只要为资源实现GET和HEAD方法即可\n2. GET是最常用的方法，通常用于请求服务器发送某个资源。\n3. HEAD与GET类似，但服务器在响应中值返回首部，不返回实体的主体部分\n4. PUT让服务器用请求的主体部分来创建一个由所请求的URL命名的新文档，或者，如果那个URL已经存在的话，就用干这个主体替代它\n5. POST起初是用来向服务器输入数据的。实际上，通常会用它来支持HTML的表单。表单中填好的数据通常会被送给服务器，然后由服务器将其发送到要去的地方。\n6. TRACE会在目的服务器端发起一个环回诊断，最后一站的服务器会弹回一个TRACE响应并在响应主体中携带它收到的原始请求报文。TRACE方法主要用于诊断，用于验证请求是否如愿穿过了请求/响应链。\n7. OPTIONS方法请求web服务器告知其支持的各种功能。可以查询服务器支持哪些方法或者对某些特殊资源支持哪些方法。\n8. DELETE请求服务器删除请求URL指定的资源","cost":5,"scores":10},{"q":"谈谈 Cookie 的弊端以及和 Web Storage 有什么不同?","a":"1.弊端\n-----------------------\n`cookie`虽然在持久保存客户端数据提供了方便，分担了服务器存储的负担，但还是有很多局限性的。\n\n1. IE6或更低版本最多20个cookie\n2. IE7和之后的版本最后可以有50个cookie。\n3. Firefox最多50个cookie\n4. chrome和Safari没有做硬性限制\n\n`IE`和`Opera` 会清理近期最少使用的`cookie`，`Firefox`会随机清理`cookie`。\n\n`cookie`的最大大约为`4096`字节，为了兼容性，一般不能超过`4095`字节。\n\nIE 提供了一种存储可以持久化用户数据，叫做`uerData`，从`IE5.0`就开始支持。每个数据最多128K，每个域名下最多1M。这个持久化数据放在缓存中，如果缓存没有清理，那么会一直存在。\n\n### 优点：极高的扩展性和可用性\n\n1. 通过良好的编程，控制保存在cookie中的session对象的大小。\n2. 通过加密和安全传输技术（SSL），减少cookie被破解的可能性。\n3. 只在cookie中存放不敏感数据，即使被盗也不会有重大损失。\n4. 控制cookie的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的cookie。\n\n### 缺点：\n\n1. `Cookie`数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。\n2. 安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。  \n3. 有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。\n\n2.web storage 和 cookie的区别\n-----------------------\n\n`Web Storage`的概念和`cookie`相似，区别是它是为了更大容量存储设计的。`Cookie`的大小是受限的，并且每次你请求一个新的页面的时候`Cookie`都会被发送过去，这样无形中浪费了带宽，另外`cookie`还需要指定作用域，不可以跨域调用。\n\n除此之外，`Web Storage`拥有`setItem,getItem,removeItem,clear`等方法，不像`cookie`需要前端开发者自己封装`setCookie，getCookie`。\n\n但是`Cookie`也是不可以或缺的：`Cookie`的作用是与服务器进行交互，作为`HTTP`规范的一部分而存在 ，而`Web Storage`仅仅是为了在本地“存储”数据而生\n\n浏览器的支持除了`IE７`及以下不支持外，其他标准浏览器都完全支持(ie及FF需在web服务器里运行)，值得一提的是IE总是办好事，例如IE7、IE6中的`UserData`其实就是`javascript`本地存储的解决方案。通过简单的代码封装可以统一到所有的浏览器都支持`web storage`。\n\n`localStorage`和`sessionStorage`都具有相同的操作方法，例如`setItem、getItem`和`removeItem`等\n","cost":5,"scores":15}]